// Generated by Dagger (https://dagger.dev).
package biz.filmeroo.premier.app;

import android.content.Context;
import android.content.res.Resources;
import biz.filmeroo.premier.api.FilmService;
import biz.filmeroo.premier.detail.DetailActivity;
import biz.filmeroo.premier.detail.DetailActivity_MembersInjector;
import biz.filmeroo.premier.detail.FilmDetailPresenter;
import biz.filmeroo.premier.main.FilmAdapter;
import biz.filmeroo.premier.main.FilmPresenter;
import biz.filmeroo.premier.main.FilmRepository;
import biz.filmeroo.premier.main.MainActivity;
import biz.filmeroo.premier.main.MainActivity_MembersInjector;
import biz.filmeroo.premier.main.SearchActivity;
import biz.filmeroo.premier.main.SearchActivity_MembersInjector;
import biz.filmeroo.premier.main.SearchPresenter;
import com.squareup.picasso.Picasso;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<Binder_MainActivity$app_debug.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Binder_DetailActivity$app_debug.DetailActivitySubcomponent.Factory> detailActivitySubcomponentFactoryProvider;

  private Provider<Binder_SearchActivity.SearchActivitySubcomponent.Factory> searchActivitySubcomponentFactoryProvider;

  private Provider<PremierApp> seedInstanceProvider;

  private Provider<Context> provideAppContextProvider;

  private Provider<Resources> provideResourceProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<FilmService> provideFilmServiceProvider;

  private Provider<Picasso> providePicassoProvider;

  private DaggerAppComponent(AppModule appModuleParam, PremierApp seedInstanceParam) {

    initialize(appModuleParam, seedInstanceParam);

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(DetailActivity.class, (Provider) detailActivitySubcomponentFactoryProvider).put(SearchActivity.class, (Provider) searchActivitySubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final PremierApp seedInstanceParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<Binder_MainActivity$app_debug.MainActivitySubcomponent.Factory>() {
      @Override
      public Binder_MainActivity$app_debug.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory(appComponent);
      }
    };
    this.detailActivitySubcomponentFactoryProvider = new Provider<Binder_DetailActivity$app_debug.DetailActivitySubcomponent.Factory>() {
      @Override
      public Binder_DetailActivity$app_debug.DetailActivitySubcomponent.Factory get() {
        return new DetailActivitySubcomponentFactory(appComponent);
      }
    };
    this.searchActivitySubcomponentFactoryProvider = new Provider<Binder_SearchActivity.SearchActivitySubcomponent.Factory>() {
      @Override
      public Binder_SearchActivity.SearchActivitySubcomponent.Factory get() {
        return new SearchActivitySubcomponentFactory(appComponent);
      }
    };
    this.seedInstanceProvider = InstanceFactory.create(seedInstanceParam);
    this.provideAppContextProvider = AppModule_ProvideAppContextFactory.create(appModuleParam, seedInstanceProvider);
    this.provideResourceProvider = AppModule_ProvideResourceFactory.create(appModuleParam, provideAppContextProvider);
    this.provideOkHttpClientProvider = DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(appModuleParam, provideResourceProvider));
    this.provideFilmServiceProvider = DoubleCheck.provider(AppModule_ProvideFilmServiceFactory.create(appModuleParam, provideOkHttpClientProvider));
    this.providePicassoProvider = DoubleCheck.provider(AppModule_ProvidePicassoFactory.create(appModuleParam));
  }

  @Override
  public void inject(PremierApp arg0) {
    injectPremierApp(arg0);
  }

  private PremierApp injectPremierApp(PremierApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private PremierApp seedInstance;

    @Override
    public void seedInstance(PremierApp arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, PremierApp.class);
      return new DaggerAppComponent(new AppModule(), seedInstance);
    }
  }

  private static final class MainActivitySubcomponentFactory implements Binder_MainActivity$app_debug.MainActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private MainActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Binder_MainActivity$app_debug.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class DetailActivitySubcomponentFactory implements Binder_DetailActivity$app_debug.DetailActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private DetailActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Binder_DetailActivity$app_debug.DetailActivitySubcomponent create(DetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new DetailActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SearchActivitySubcomponentFactory implements Binder_SearchActivity.SearchActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SearchActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Binder_SearchActivity.SearchActivitySubcomponent create(SearchActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SearchActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class MainActivitySubcomponentImpl implements Binder_MainActivity$app_debug.MainActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private MainActivitySubcomponentImpl(DaggerAppComponent appComponent, MainActivity arg0Param) {
      this.appComponent = appComponent;


    }

    private FilmRepository filmRepository() {
      return new FilmRepository(appComponent.provideFilmServiceProvider.get());
    }

    private FilmPresenter filmPresenter() {
      return new FilmPresenter(filmRepository());
    }

    private FilmAdapter filmAdapter() {
      return new FilmAdapter(appComponent.providePicassoProvider.get());
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectPresenter(instance, filmPresenter());
      MainActivity_MembersInjector.injectAdapter(instance, filmAdapter());
      return instance;
    }
  }

  private static final class DetailActivitySubcomponentImpl implements Binder_DetailActivity$app_debug.DetailActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final DetailActivitySubcomponentImpl detailActivitySubcomponentImpl = this;

    private DetailActivitySubcomponentImpl(DaggerAppComponent appComponent,
        DetailActivity arg0Param) {
      this.appComponent = appComponent;


    }

    private FilmRepository filmRepository() {
      return new FilmRepository(appComponent.provideFilmServiceProvider.get());
    }

    private FilmDetailPresenter filmDetailPresenter() {
      return new FilmDetailPresenter(filmRepository());
    }

    @Override
    public void inject(DetailActivity arg0) {
      injectDetailActivity(arg0);
    }

    private DetailActivity injectDetailActivity(DetailActivity instance) {
      DetailActivity_MembersInjector.injectPresenter(instance, filmDetailPresenter());
      DetailActivity_MembersInjector.injectPicasso(instance, appComponent.providePicassoProvider.get());
      return instance;
    }
  }

  private static final class SearchActivitySubcomponentImpl implements Binder_SearchActivity.SearchActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final SearchActivitySubcomponentImpl searchActivitySubcomponentImpl = this;

    private SearchActivitySubcomponentImpl(DaggerAppComponent appComponent,
        SearchActivity arg0Param) {
      this.appComponent = appComponent;


    }

    private FilmRepository filmRepository() {
      return new FilmRepository(appComponent.provideFilmServiceProvider.get());
    }

    private SearchPresenter searchPresenter() {
      return new SearchPresenter(filmRepository());
    }

    private FilmAdapter filmAdapter() {
      return new FilmAdapter(appComponent.providePicassoProvider.get());
    }

    @Override
    public void inject(SearchActivity arg0) {
      injectSearchActivity(arg0);
    }

    private SearchActivity injectSearchActivity(SearchActivity instance) {
      SearchActivity_MembersInjector.injectPresenter(instance, searchPresenter());
      SearchActivity_MembersInjector.injectAdapter(instance, filmAdapter());
      return instance;
    }
  }
}
